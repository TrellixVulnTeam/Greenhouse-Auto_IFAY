
Test_Interrupciones.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cb0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000e38  08000e40  00010e40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000e38  08000e38  00010e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000e3c  08000e3c  00010e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010e40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00010e40  2**0
                  CONTENTS
  7 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2000001c  2000001c  00020000  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00010e40  2**0
                  CONTENTS, READONLY
 10 .debug_info   00002cfe  00000000  00000000  00010e70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000be7  00000000  00000000  00013b6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000400  00000000  00000000  00014758  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000378  00000000  00000000  00014b58  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00001839  00000000  00000000  00014ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000017e3  00000000  00000000  00016709  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00017eec  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000010c4  00000000  00000000  00017f68  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0001902c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000e20 	.word	0x08000e20

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000e20 	.word	0x08000e20

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__gedf2>:
 8000538:	f04f 3cff 	mov.w	ip, #4294967295
 800053c:	e006      	b.n	800054c <__cmpdf2+0x4>
 800053e:	bf00      	nop

08000540 <__ledf2>:
 8000540:	f04f 0c01 	mov.w	ip, #1
 8000544:	e002      	b.n	800054c <__cmpdf2+0x4>
 8000546:	bf00      	nop

08000548 <__cmpdf2>:
 8000548:	f04f 0c01 	mov.w	ip, #1
 800054c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000550:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000554:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000558:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800055c:	bf18      	it	ne
 800055e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000562:	d01b      	beq.n	800059c <__cmpdf2+0x54>
 8000564:	b001      	add	sp, #4
 8000566:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800056a:	bf0c      	ite	eq
 800056c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000570:	ea91 0f03 	teqne	r1, r3
 8000574:	bf02      	ittt	eq
 8000576:	ea90 0f02 	teqeq	r0, r2
 800057a:	2000      	moveq	r0, #0
 800057c:	4770      	bxeq	lr
 800057e:	f110 0f00 	cmn.w	r0, #0
 8000582:	ea91 0f03 	teq	r1, r3
 8000586:	bf58      	it	pl
 8000588:	4299      	cmppl	r1, r3
 800058a:	bf08      	it	eq
 800058c:	4290      	cmpeq	r0, r2
 800058e:	bf2c      	ite	cs
 8000590:	17d8      	asrcs	r0, r3, #31
 8000592:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000596:	f040 0001 	orr.w	r0, r0, #1
 800059a:	4770      	bx	lr
 800059c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005a4:	d102      	bne.n	80005ac <__cmpdf2+0x64>
 80005a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005aa:	d107      	bne.n	80005bc <__cmpdf2+0x74>
 80005ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005b4:	d1d6      	bne.n	8000564 <__cmpdf2+0x1c>
 80005b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005ba:	d0d3      	beq.n	8000564 <__cmpdf2+0x1c>
 80005bc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <__aeabi_cdrcmple>:
 80005c4:	4684      	mov	ip, r0
 80005c6:	4610      	mov	r0, r2
 80005c8:	4662      	mov	r2, ip
 80005ca:	468c      	mov	ip, r1
 80005cc:	4619      	mov	r1, r3
 80005ce:	4663      	mov	r3, ip
 80005d0:	e000      	b.n	80005d4 <__aeabi_cdcmpeq>
 80005d2:	bf00      	nop

080005d4 <__aeabi_cdcmpeq>:
 80005d4:	b501      	push	{r0, lr}
 80005d6:	f7ff ffb7 	bl	8000548 <__cmpdf2>
 80005da:	2800      	cmp	r0, #0
 80005dc:	bf48      	it	mi
 80005de:	f110 0f00 	cmnmi.w	r0, #0
 80005e2:	bd01      	pop	{r0, pc}

080005e4 <__aeabi_dcmpeq>:
 80005e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005e8:	f7ff fff4 	bl	80005d4 <__aeabi_cdcmpeq>
 80005ec:	bf0c      	ite	eq
 80005ee:	2001      	moveq	r0, #1
 80005f0:	2000      	movne	r0, #0
 80005f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005f6:	bf00      	nop

080005f8 <__aeabi_dcmplt>:
 80005f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005fc:	f7ff ffea 	bl	80005d4 <__aeabi_cdcmpeq>
 8000600:	bf34      	ite	cc
 8000602:	2001      	movcc	r0, #1
 8000604:	2000      	movcs	r0, #0
 8000606:	f85d fb08 	ldr.w	pc, [sp], #8
 800060a:	bf00      	nop

0800060c <__aeabi_dcmple>:
 800060c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000610:	f7ff ffe0 	bl	80005d4 <__aeabi_cdcmpeq>
 8000614:	bf94      	ite	ls
 8000616:	2001      	movls	r0, #1
 8000618:	2000      	movhi	r0, #0
 800061a:	f85d fb08 	ldr.w	pc, [sp], #8
 800061e:	bf00      	nop

08000620 <__aeabi_dcmpge>:
 8000620:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000624:	f7ff ffce 	bl	80005c4 <__aeabi_cdrcmple>
 8000628:	bf94      	ite	ls
 800062a:	2001      	movls	r0, #1
 800062c:	2000      	movhi	r0, #0
 800062e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000632:	bf00      	nop

08000634 <__aeabi_dcmpgt>:
 8000634:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000638:	f7ff ffc4 	bl	80005c4 <__aeabi_cdrcmple>
 800063c:	bf34      	ite	cc
 800063e:	2001      	movcc	r0, #1
 8000640:	2000      	movcs	r0, #0
 8000642:	f85d fb08 	ldr.w	pc, [sp], #8
 8000646:	bf00      	nop

08000648 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000650:	2300      	movs	r3, #0
 8000652:	73fb      	strb	r3, [r7, #15]
 8000654:	2300      	movs	r3, #0
 8000656:	73bb      	strb	r3, [r7, #14]
 8000658:	230f      	movs	r3, #15
 800065a:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	78db      	ldrb	r3, [r3, #3]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d039      	beq.n	80006d8 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000664:	4b27      	ldr	r3, [pc, #156]	; (8000704 <NVIC_Init+0xbc>)
 8000666:	68db      	ldr	r3, [r3, #12]
 8000668:	43db      	mvns	r3, r3
 800066a:	0a1b      	lsrs	r3, r3, #8
 800066c:	b2db      	uxtb	r3, r3
 800066e:	f003 0307 	and.w	r3, r3, #7
 8000672:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000674:	7bfb      	ldrb	r3, [r7, #15]
 8000676:	f1c3 0304 	rsb	r3, r3, #4
 800067a:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 800067c:	7b7a      	ldrb	r2, [r7, #13]
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	fa42 f303 	asr.w	r3, r2, r3
 8000684:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	785b      	ldrb	r3, [r3, #1]
 800068a:	461a      	mov	r2, r3
 800068c:	7bbb      	ldrb	r3, [r7, #14]
 800068e:	fa02 f303 	lsl.w	r3, r2, r3
 8000692:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	789a      	ldrb	r2, [r3, #2]
 8000698:	7b7b      	ldrb	r3, [r7, #13]
 800069a:	4013      	ands	r3, r2
 800069c:	b2da      	uxtb	r2, r3
 800069e:	7bfb      	ldrb	r3, [r7, #15]
 80006a0:	4313      	orrs	r3, r2
 80006a2:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 80006a4:	7bfb      	ldrb	r3, [r7, #15]
 80006a6:	011b      	lsls	r3, r3, #4
 80006a8:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80006aa:	4a17      	ldr	r2, [pc, #92]	; (8000708 <NVIC_Init+0xc0>)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	4413      	add	r3, r2
 80006b2:	7bfa      	ldrb	r2, [r7, #15]
 80006b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80006b8:	4a13      	ldr	r2, [pc, #76]	; (8000708 <NVIC_Init+0xc0>)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	095b      	lsrs	r3, r3, #5
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	f003 031f 	and.w	r3, r3, #31
 80006cc:	2101      	movs	r1, #1
 80006ce:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80006d2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80006d6:	e00f      	b.n	80006f8 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80006d8:	490b      	ldr	r1, [pc, #44]	; (8000708 <NVIC_Init+0xc0>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	095b      	lsrs	r3, r3, #5
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	f003 031f 	and.w	r3, r3, #31
 80006ec:	2201      	movs	r2, #1
 80006ee:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80006f0:	f100 0320 	add.w	r3, r0, #32
 80006f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80006f8:	bf00      	nop
 80006fa:	3714      	adds	r7, #20
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	e000ed00 	.word	0xe000ed00
 8000708:	e000e100 	.word	0xe000e100

0800070c <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 800070c:	b480      	push	{r7}
 800070e:	b085      	sub	sp, #20
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8000718:	4b34      	ldr	r3, [pc, #208]	; (80007ec <EXTI_Init+0xe0>)
 800071a:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	799b      	ldrb	r3, [r3, #6]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d04f      	beq.n	80007c4 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000724:	4931      	ldr	r1, [pc, #196]	; (80007ec <EXTI_Init+0xe0>)
 8000726:	4b31      	ldr	r3, [pc, #196]	; (80007ec <EXTI_Init+0xe0>)
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	43db      	mvns	r3, r3
 8000730:	4013      	ands	r3, r2
 8000732:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000734:	492d      	ldr	r1, [pc, #180]	; (80007ec <EXTI_Init+0xe0>)
 8000736:	4b2d      	ldr	r3, [pc, #180]	; (80007ec <EXTI_Init+0xe0>)
 8000738:	685a      	ldr	r2, [r3, #4]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	43db      	mvns	r3, r3
 8000740:	4013      	ands	r3, r2
 8000742:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	791b      	ldrb	r3, [r3, #4]
 8000748:	461a      	mov	r2, r3
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	4413      	add	r3, r2
 800074e:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	68fa      	ldr	r2, [r7, #12]
 8000754:	6811      	ldr	r1, [r2, #0]
 8000756:	687a      	ldr	r2, [r7, #4]
 8000758:	6812      	ldr	r2, [r2, #0]
 800075a:	430a      	orrs	r2, r1
 800075c:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 800075e:	4923      	ldr	r1, [pc, #140]	; (80007ec <EXTI_Init+0xe0>)
 8000760:	4b22      	ldr	r3, [pc, #136]	; (80007ec <EXTI_Init+0xe0>)
 8000762:	689a      	ldr	r2, [r3, #8]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	43db      	mvns	r3, r3
 800076a:	4013      	ands	r3, r2
 800076c:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 800076e:	491f      	ldr	r1, [pc, #124]	; (80007ec <EXTI_Init+0xe0>)
 8000770:	4b1e      	ldr	r3, [pc, #120]	; (80007ec <EXTI_Init+0xe0>)
 8000772:	68da      	ldr	r2, [r3, #12]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	43db      	mvns	r3, r3
 800077a:	4013      	ands	r3, r2
 800077c:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	795b      	ldrb	r3, [r3, #5]
 8000782:	2b10      	cmp	r3, #16
 8000784:	d10e      	bne.n	80007a4 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000786:	4919      	ldr	r1, [pc, #100]	; (80007ec <EXTI_Init+0xe0>)
 8000788:	4b18      	ldr	r3, [pc, #96]	; (80007ec <EXTI_Init+0xe0>)
 800078a:	689a      	ldr	r2, [r3, #8]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4313      	orrs	r3, r2
 8000792:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000794:	4915      	ldr	r1, [pc, #84]	; (80007ec <EXTI_Init+0xe0>)
 8000796:	4b15      	ldr	r3, [pc, #84]	; (80007ec <EXTI_Init+0xe0>)
 8000798:	68da      	ldr	r2, [r3, #12]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4313      	orrs	r3, r2
 80007a0:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80007a2:	e01d      	b.n	80007e0 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 80007a4:	4b11      	ldr	r3, [pc, #68]	; (80007ec <EXTI_Init+0xe0>)
 80007a6:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	795b      	ldrb	r3, [r3, #5]
 80007ac:	461a      	mov	r2, r3
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	4413      	add	r3, r2
 80007b2:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	68fa      	ldr	r2, [r7, #12]
 80007b8:	6811      	ldr	r1, [r2, #0]
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	6812      	ldr	r2, [r2, #0]
 80007be:	430a      	orrs	r2, r1
 80007c0:	601a      	str	r2, [r3, #0]
}
 80007c2:	e00d      	b.n	80007e0 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	791b      	ldrb	r3, [r3, #4]
 80007c8:	461a      	mov	r2, r3
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	4413      	add	r3, r2
 80007ce:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	68fa      	ldr	r2, [r7, #12]
 80007d4:	6811      	ldr	r1, [r2, #0]
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	6812      	ldr	r2, [r2, #0]
 80007da:	43d2      	mvns	r2, r2
 80007dc:	400a      	ands	r2, r1
 80007de:	601a      	str	r2, [r3, #0]
}
 80007e0:	bf00      	nop
 80007e2:	3714      	adds	r7, #20
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	40013c00 	.word	0x40013c00

080007f0 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 80007f8:	2300      	movs	r3, #0
 80007fa:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8000800:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <EXTI_GetITStatus+0x44>)
 8000802:	681a      	ldr	r2, [r3, #0]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	4013      	ands	r3, r2
 8000808:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800080a:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <EXTI_GetITStatus+0x44>)
 800080c:	695a      	ldr	r2, [r3, #20]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4013      	ands	r3, r2
 8000812:	2b00      	cmp	r3, #0
 8000814:	d005      	beq.n	8000822 <EXTI_GetITStatus+0x32>
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d002      	beq.n	8000822 <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 800081c:	2301      	movs	r3, #1
 800081e:	73fb      	strb	r3, [r7, #15]
 8000820:	e001      	b.n	8000826 <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 8000822:	2300      	movs	r3, #0
 8000824:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000826:	7bfb      	ldrb	r3, [r7, #15]
}
 8000828:	4618      	mov	r0, r3
 800082a:	3714      	adds	r7, #20
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	40013c00 	.word	0x40013c00

08000838 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000840:	4a04      	ldr	r2, [pc, #16]	; (8000854 <EXTI_ClearITPendingBit+0x1c>)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	6153      	str	r3, [r2, #20]
}
 8000846:	bf00      	nop
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	40013c00 	.word	0x40013c00

08000858 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000858:	b480      	push	{r7}
 800085a:	b087      	sub	sp, #28
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
 8000866:	2300      	movs	r3, #0
 8000868:	613b      	str	r3, [r7, #16]
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
 8000872:	e076      	b.n	8000962 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000874:	2201      	movs	r2, #1
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	fa02 f303 	lsl.w	r3, r2, r3
 800087c:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	693b      	ldr	r3, [r7, #16]
 8000884:	4013      	ands	r3, r2
 8000886:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000888:	68fa      	ldr	r2, [r7, #12]
 800088a:	693b      	ldr	r3, [r7, #16]
 800088c:	429a      	cmp	r2, r3
 800088e:	d165      	bne.n	800095c <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	2103      	movs	r1, #3
 800089a:	fa01 f303 	lsl.w	r3, r1, r3
 800089e:	43db      	mvns	r3, r3
 80008a0:	401a      	ands	r2, r3
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	791b      	ldrb	r3, [r3, #4]
 80008ae:	4619      	mov	r1, r3
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	fa01 f303 	lsl.w	r3, r1, r3
 80008b8:	431a      	orrs	r2, r3
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	791b      	ldrb	r3, [r3, #4]
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d003      	beq.n	80008ce <GPIO_Init+0x76>
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	791b      	ldrb	r3, [r3, #4]
 80008ca:	2b02      	cmp	r3, #2
 80008cc:	d12e      	bne.n	800092c <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	689a      	ldr	r2, [r3, #8]
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	2103      	movs	r1, #3
 80008d8:	fa01 f303 	lsl.w	r3, r1, r3
 80008dc:	43db      	mvns	r3, r3
 80008de:	401a      	ands	r2, r3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	689a      	ldr	r2, [r3, #8]
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	795b      	ldrb	r3, [r3, #5]
 80008ec:	4619      	mov	r1, r3
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	005b      	lsls	r3, r3, #1
 80008f2:	fa01 f303 	lsl.w	r3, r1, r3
 80008f6:	431a      	orrs	r2, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	685a      	ldr	r2, [r3, #4]
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	b29b      	uxth	r3, r3
 8000904:	4619      	mov	r1, r3
 8000906:	2301      	movs	r3, #1
 8000908:	408b      	lsls	r3, r1
 800090a:	43db      	mvns	r3, r3
 800090c:	401a      	ands	r2, r3
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	683a      	ldr	r2, [r7, #0]
 8000918:	7992      	ldrb	r2, [r2, #6]
 800091a:	4611      	mov	r1, r2
 800091c:	697a      	ldr	r2, [r7, #20]
 800091e:	b292      	uxth	r2, r2
 8000920:	fa01 f202 	lsl.w	r2, r1, r2
 8000924:	b292      	uxth	r2, r2
 8000926:	431a      	orrs	r2, r3
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	68da      	ldr	r2, [r3, #12]
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	b29b      	uxth	r3, r3
 8000934:	005b      	lsls	r3, r3, #1
 8000936:	2103      	movs	r1, #3
 8000938:	fa01 f303 	lsl.w	r3, r1, r3
 800093c:	43db      	mvns	r3, r3
 800093e:	401a      	ands	r2, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	68da      	ldr	r2, [r3, #12]
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	79db      	ldrb	r3, [r3, #7]
 800094c:	4619      	mov	r1, r3
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	fa01 f303 	lsl.w	r3, r1, r3
 8000956:	431a      	orrs	r2, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	3301      	adds	r3, #1
 8000960:	617b      	str	r3, [r7, #20]
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	2b0f      	cmp	r3, #15
 8000966:	d985      	bls.n	8000874 <GPIO_Init+0x1c>
    }
  }
}
 8000968:	bf00      	nop
 800096a:	371c      	adds	r7, #28
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <GPIO_ToggleBits>:
  *                STM32F40xx/41xx and STM32F427x/437x devices.  
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	460b      	mov	r3, r1
 800097e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	695a      	ldr	r2, [r3, #20]
 8000984:	887b      	ldrh	r3, [r7, #2]
 8000986:	405a      	eors	r2, r3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	615a      	str	r2, [r3, #20]
}
 800098c:	bf00      	nop
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	460b      	mov	r3, r1
 80009a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80009a4:	78fb      	ldrb	r3, [r7, #3]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d006      	beq.n	80009b8 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80009aa:	490a      	ldr	r1, [pc, #40]	; (80009d4 <RCC_AHB1PeriphClockCmd+0x3c>)
 80009ac:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <RCC_AHB1PeriphClockCmd+0x3c>)
 80009ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4313      	orrs	r3, r2
 80009b4:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80009b6:	e006      	b.n	80009c6 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80009b8:	4906      	ldr	r1, [pc, #24]	; (80009d4 <RCC_AHB1PeriphClockCmd+0x3c>)
 80009ba:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <RCC_AHB1PeriphClockCmd+0x3c>)
 80009bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	43db      	mvns	r3, r3
 80009c2:	4013      	ands	r3, r2
 80009c4:	630b      	str	r3, [r1, #48]	; 0x30
}
 80009c6:	bf00      	nop
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	40023800 	.word	0x40023800

080009d8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	460b      	mov	r3, r1
 80009e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80009e4:	78fb      	ldrb	r3, [r7, #3]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d006      	beq.n	80009f8 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80009ea:	490a      	ldr	r1, [pc, #40]	; (8000a14 <RCC_APB2PeriphClockCmd+0x3c>)
 80009ec:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <RCC_APB2PeriphClockCmd+0x3c>)
 80009ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4313      	orrs	r3, r2
 80009f4:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80009f6:	e006      	b.n	8000a06 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80009f8:	4906      	ldr	r1, [pc, #24]	; (8000a14 <RCC_APB2PeriphClockCmd+0x3c>)
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <RCC_APB2PeriphClockCmd+0x3c>)
 80009fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	43db      	mvns	r3, r3
 8000a02:	4013      	ands	r3, r2
 8000a04:	644b      	str	r3, [r1, #68]	; 0x44
}
 8000a06:	bf00      	nop
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	40023800 	.word	0x40023800

08000a18 <SYSCFG_EXTILineConfig>:
  *           and STM32F427x/STM32F437x devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8000a18:	b490      	push	{r4, r7}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	460a      	mov	r2, r1
 8000a22:	71fb      	strb	r3, [r7, #7]
 8000a24:	4613      	mov	r3, r2
 8000a26:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8000a2c:	79bb      	ldrb	r3, [r7, #6]
 8000a2e:	f003 0303 	and.w	r3, r3, #3
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	220f      	movs	r2, #15
 8000a36:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3a:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8000a3c:	4916      	ldr	r1, [pc, #88]	; (8000a98 <SYSCFG_EXTILineConfig+0x80>)
 8000a3e:	79bb      	ldrb	r3, [r7, #6]
 8000a40:	089b      	lsrs	r3, r3, #2
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	4618      	mov	r0, r3
 8000a46:	4a14      	ldr	r2, [pc, #80]	; (8000a98 <SYSCFG_EXTILineConfig+0x80>)
 8000a48:	79bb      	ldrb	r3, [r7, #6]
 8000a4a:	089b      	lsrs	r3, r3, #2
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	3302      	adds	r3, #2
 8000a50:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	43db      	mvns	r3, r3
 8000a58:	401a      	ands	r2, r3
 8000a5a:	1c83      	adds	r3, r0, #2
 8000a5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8000a60:	480d      	ldr	r0, [pc, #52]	; (8000a98 <SYSCFG_EXTILineConfig+0x80>)
 8000a62:	79bb      	ldrb	r3, [r7, #6]
 8000a64:	089b      	lsrs	r3, r3, #2
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	461c      	mov	r4, r3
 8000a6a:	4a0b      	ldr	r2, [pc, #44]	; (8000a98 <SYSCFG_EXTILineConfig+0x80>)
 8000a6c:	79bb      	ldrb	r3, [r7, #6]
 8000a6e:	089b      	lsrs	r3, r3, #2
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	3302      	adds	r3, #2
 8000a74:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a78:	79f9      	ldrb	r1, [r7, #7]
 8000a7a:	79bb      	ldrb	r3, [r7, #6]
 8000a7c:	f003 0303 	and.w	r3, r3, #3
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	fa01 f303 	lsl.w	r3, r1, r3
 8000a86:	431a      	orrs	r2, r3
 8000a88:	1ca3      	adds	r3, r4, #2
 8000a8a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000a8e:	bf00      	nop
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc90      	pop	{r4, r7}
 8000a96:	4770      	bx	lr
 8000a98:	40013800 	.word	0x40013800

08000a9c <inicializar_boton_user>:
	{
		TimingDelay--;
	}
}

void inicializar_boton_user(){
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
	//Inicializacion de los botones.
	//

	GPIO_InitTypeDef GPIO_Init_Pins; // Estrucura de datos para configurar el GPIO

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	f7ff ff77 	bl	8000998 <RCC_AHB1PeriphClockCmd>

	GPIO_Init_Pins.GPIO_Pin = GPIO_Pin_0;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	603b      	str	r3, [r7, #0]
	GPIO_Init_Pins.GPIO_Mode = GPIO_Mode_IN; //Entrada
 8000aae:	2300      	movs	r3, #0
 8000ab0:	713b      	strb	r3, [r7, #4]
	GPIO_Init_Pins.GPIO_Speed = GPIO_Speed_100MHz;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	717b      	strb	r3, [r7, #5]
	GPIO_Init_Pins.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	71fb      	strb	r3, [r7, #7]

	GPIO_Init(GPIOA, &GPIO_Init_Pins);// Carga de la estrucura de datos.
 8000aba:	463b      	mov	r3, r7
 8000abc:	4619      	mov	r1, r3
 8000abe:	4803      	ldr	r0, [pc, #12]	; (8000acc <inicializar_boton_user+0x30>)
 8000ac0:	f7ff feca 	bl	8000858 <GPIO_Init>

}
 8000ac4:	bf00      	nop
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40020000 	.word	0x40020000

08000ad0 <inicializar_leds>:

void inicializar_leds(){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0

	//
	//Inicializacion de los leds.
	//

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8000ad6:	2101      	movs	r1, #1
 8000ad8:	2008      	movs	r0, #8
 8000ada:	f7ff ff5d 	bl	8000998 <RCC_AHB1PeriphClockCmd>

	GPIO_Init_Pins.GPIO_Pin= GPIO_Pin_11 |GPIO_Pin_12 | GPIO_Pin_13| GPIO_Pin_14;
 8000ade:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8000ae2:	603b      	str	r3, [r7, #0]
	GPIO_Init_Pins.GPIO_Mode=GPIO_Mode_OUT ;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	713b      	strb	r3, [r7, #4]
	GPIO_Init_Pins.GPIO_Speed= GPIO_Speed_100MHz;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	717b      	strb	r3, [r7, #5]
	GPIO_Init_Pins.GPIO_OType= GPIO_OType_PP ;
 8000aec:	2300      	movs	r3, #0
 8000aee:	71bb      	strb	r3, [r7, #6]
	GPIO_Init_Pins.GPIO_PuPd= GPIO_PuPd_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	71fb      	strb	r3, [r7, #7]

	GPIO_Init(GPIOD,&GPIO_Init_Pins); // Carga de la estrucura de datos.
 8000af4:	463b      	mov	r3, r7
 8000af6:	4619      	mov	r1, r3
 8000af8:	4803      	ldr	r0, [pc, #12]	; (8000b08 <inicializar_leds+0x38>)
 8000afa:	f7ff fead 	bl	8000858 <GPIO_Init>

}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40020c00 	.word	0x40020c00

08000b0c <init_interrupt_C0>:
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
	/* Add to NVIC */
	NVIC_Init(&NVIC_InitStruct);
}

void init_interrupt_C0(){
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
	EXTI_InitTypeDef EXTI_InitStructure;
	NVIC_InitTypeDef NVIC_InitStruct;

	/* Enable SYSCFG's APB interface clock */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8000b12:	2101      	movs	r1, #1
 8000b14:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000b18:	f7ff ff5e 	bl	80009d8 <RCC_APB2PeriphClockCmd>
	/* Connect EXTI Line0 to PA0 pin */
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC, EXTI_PinSource0);
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	2002      	movs	r0, #2
 8000b20:	f7ff ff7a 	bl	8000a18 <SYSCFG_EXTILineConfig>
	/* Configure EXTI line0 */
	EXTI_InitStructure.EXTI_Line = EXTI_Line0;
 8000b24:	2301      	movs	r3, #1
 8000b26:	60bb      	str	r3, [r7, #8]
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	733b      	strb	r3, [r7, #12]
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
 8000b2c:	230c      	movs	r3, #12
 8000b2e:	737b      	strb	r3, [r7, #13]
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8000b30:	2301      	movs	r3, #1
 8000b32:	73bb      	strb	r3, [r7, #14]
	EXTI_Init(&EXTI_InitStructure);
 8000b34:	f107 0308 	add.w	r3, r7, #8
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff fde7 	bl	800070c <EXTI_Init>

	/* Add IRQ vector to NVIC */
	/* PD0 is connected to EXTI_Line0, which has EXTI0_IRQn vector */
	NVIC_InitStruct.NVIC_IRQChannel = EXTI0_IRQn;
 8000b3e:	2306      	movs	r3, #6
 8000b40:	713b      	strb	r3, [r7, #4]
	/* Set priority */
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0x00;
 8000b42:	2300      	movs	r3, #0
 8000b44:	717b      	strb	r3, [r7, #5]
	/* Set sub priority */
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0x00;
 8000b46:	2300      	movs	r3, #0
 8000b48:	71bb      	strb	r3, [r7, #6]
	/* Enable interrupt */
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	71fb      	strb	r3, [r7, #7]
	/* Add to NVIC */
	NVIC_Init(&NVIC_InitStruct);
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff fd79 	bl	8000648 <NVIC_Init>
}
 8000b56:	bf00      	nop
 8000b58:	3710      	adds	r7, #16
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
	...

08000b60 <EXTI0_IRQHandler>:


/* Set interrupt handlers */

/* Handle PD0 interrupt */
void EXTI0_IRQHandler(void) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
    /* Make sure that interrupt flag is set */
	int i;

	for(i=0;i<1e5;i++); // delay para antirebote.
 8000b66:	2300      	movs	r3, #0
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	e002      	b.n	8000b72 <EXTI0_IRQHandler+0x12>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	607b      	str	r3, [r7, #4]
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f7ff fc7a 	bl	800046c <__aeabi_i2d>
 8000b78:	a30e      	add	r3, pc, #56	; (adr r3, 8000bb4 <EXTI0_IRQHandler+0x54>)
 8000b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b7e:	f7ff fd3b 	bl	80005f8 <__aeabi_dcmplt>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d1f1      	bne.n	8000b6c <EXTI0_IRQHandler+0xc>

	if (EXTI_GetITStatus(EXTI_Line0) != RESET) {
 8000b88:	2001      	movs	r0, #1
 8000b8a:	f7ff fe31 	bl	80007f0 <EXTI_GetITStatus>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d007      	beq.n	8000ba4 <EXTI0_IRQHandler+0x44>
		/* Do your stuff when PD0 is changed */

		GPIO_ToggleBits(GPIOD,GPIO_Pin_13);
 8000b94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b98:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <EXTI0_IRQHandler+0x50>)
 8000b9a:	f7ff feeb 	bl	8000974 <GPIO_ToggleBits>

		/* Clear interrupt flag */
		EXTI_ClearITPendingBit(EXTI_Line0);
 8000b9e:	2001      	movs	r0, #1
 8000ba0:	f7ff fe4a 	bl	8000838 <EXTI_ClearITPendingBit>
	}
}
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	f3af 8000 	nop.w
 8000bb0:	40020c00 	.word	0x40020c00
 8000bb4:	00000000 	.word	0x00000000
 8000bb8:	40f86a00 	.word	0x40f86a00

08000bbc <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
  int i = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	607b      	str	r3, [r7, #4]
  *  E.g.  SCB->VTOR = 0x20000000;  
  */

  /* TODO - Add your application code here */

  inicializar_leds();
 8000bc6:	f7ff ff83 	bl	8000ad0 <inicializar_leds>
  inicializar_boton_user();
 8000bca:	f7ff ff67 	bl	8000a9c <inicializar_boton_user>
  init_interrupt_C0();
 8000bce:	f7ff ff9d 	bl	8000b0c <init_interrupt_C0>
  //init_interrupt();

  /* Infinite loop */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <main+0x16>

08000bd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c0c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000bd8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000bda:	e003      	b.n	8000be4 <LoopCopyDataInit>

08000bdc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000bde:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000be0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000be2:	3104      	adds	r1, #4

08000be4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000be4:	480b      	ldr	r0, [pc, #44]	; (8000c14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000be6:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000be8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000bea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000bec:	d3f6      	bcc.n	8000bdc <CopyDataInit>
  ldr  r2, =_sbss
 8000bee:	4a0b      	ldr	r2, [pc, #44]	; (8000c1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000bf0:	e002      	b.n	8000bf8 <LoopFillZerobss>

08000bf2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000bf2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000bf4:	f842 3b04 	str.w	r3, [r2], #4

08000bf8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000bf8:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000bfa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000bfc:	d3f9      	bcc.n	8000bf2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bfe:	f000 f841 	bl	8000c84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c02:	f000 f8e9 	bl	8000dd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c06:	f7ff ffd9 	bl	8000bbc <main>
  bx  lr    
 8000c0a:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c0c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000c10:	08000e40 	.word	0x08000e40
  ldr  r0, =_sdata
 8000c14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c18:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 8000c1c:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 8000c20:	2000001c 	.word	0x2000001c

08000c24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c24:	e7fe      	b.n	8000c24 <ADC_IRQHandler>

08000c26 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <HardFault_Handler+0x4>

08000c3a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000c3e:	e7fe      	b.n	8000c3e <MemManage_Handler+0x4>

08000c40 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <BusFault_Handler+0x4>

08000c46 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000c4a:	e7fe      	b.n	8000c4a <UsageFault_Handler+0x4>

08000c4c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0
}
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000c88:	4a12      	ldr	r2, [pc, #72]	; (8000cd4 <SystemInit+0x50>)
 8000c8a:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <SystemInit+0x50>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f043 0301 	orr.w	r3, r3, #1
 8000c92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c94:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <SystemInit+0x50>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000c9a:	4a0e      	ldr	r2, [pc, #56]	; (8000cd4 <SystemInit+0x50>)
 8000c9c:	4b0d      	ldr	r3, [pc, #52]	; (8000cd4 <SystemInit+0x50>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000ca4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ca8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000caa:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <SystemInit+0x50>)
 8000cac:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <SystemInit+0x54>)
 8000cae:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000cb0:	4a08      	ldr	r2, [pc, #32]	; (8000cd4 <SystemInit+0x50>)
 8000cb2:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <SystemInit+0x50>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000cbc:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <SystemInit+0x50>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000cc2:	f000 f80d 	bl	8000ce0 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cc6:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <SystemInit+0x58>)
 8000cc8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ccc:	609a      	str	r2, [r3, #8]
#endif
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	24003010 	.word	0x24003010
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	2300      	movs	r3, #0
 8000cec:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000cee:	4a36      	ldr	r2, [pc, #216]	; (8000dc8 <SetSysClock+0xe8>)
 8000cf0:	4b35      	ldr	r3, [pc, #212]	; (8000dc8 <SetSysClock+0xe8>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cf8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000cfa:	4b33      	ldr	r3, [pc, #204]	; (8000dc8 <SetSysClock+0xe8>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d02:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3301      	adds	r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d103      	bne.n	8000d18 <SetSysClock+0x38>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000d16:	d1f0      	bne.n	8000cfa <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000d18:	4b2b      	ldr	r3, [pc, #172]	; (8000dc8 <SetSysClock+0xe8>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d002      	beq.n	8000d2a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000d24:	2301      	movs	r3, #1
 8000d26:	603b      	str	r3, [r7, #0]
 8000d28:	e001      	b.n	8000d2e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d142      	bne.n	8000dba <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000d34:	4a24      	ldr	r2, [pc, #144]	; (8000dc8 <SetSysClock+0xe8>)
 8000d36:	4b24      	ldr	r3, [pc, #144]	; (8000dc8 <SetSysClock+0xe8>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d3e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8000d40:	4a22      	ldr	r2, [pc, #136]	; (8000dcc <SetSysClock+0xec>)
 8000d42:	4b22      	ldr	r3, [pc, #136]	; (8000dcc <SetSysClock+0xec>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d4a:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000d4c:	4a1e      	ldr	r2, [pc, #120]	; (8000dc8 <SetSysClock+0xe8>)
 8000d4e:	4b1e      	ldr	r3, [pc, #120]	; (8000dc8 <SetSysClock+0xe8>)
 8000d50:	689b      	ldr	r3, [r3, #8]
 8000d52:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000d54:	4a1c      	ldr	r2, [pc, #112]	; (8000dc8 <SetSysClock+0xe8>)
 8000d56:	4b1c      	ldr	r3, [pc, #112]	; (8000dc8 <SetSysClock+0xe8>)
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d5e:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000d60:	4a19      	ldr	r2, [pc, #100]	; (8000dc8 <SetSysClock+0xe8>)
 8000d62:	4b19      	ldr	r3, [pc, #100]	; (8000dc8 <SetSysClock+0xe8>)
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000d6a:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000d6c:	4b16      	ldr	r3, [pc, #88]	; (8000dc8 <SetSysClock+0xe8>)
 8000d6e:	4a18      	ldr	r2, [pc, #96]	; (8000dd0 <SetSysClock+0xf0>)
 8000d70:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000d72:	4a15      	ldr	r2, [pc, #84]	; (8000dc8 <SetSysClock+0xe8>)
 8000d74:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <SetSysClock+0xe8>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d7c:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000d7e:	bf00      	nop
 8000d80:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <SetSysClock+0xe8>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d0f9      	beq.n	8000d80 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000d8c:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <SetSysClock+0xf4>)
 8000d8e:	f240 6205 	movw	r2, #1541	; 0x605
 8000d92:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000d94:	4a0c      	ldr	r2, [pc, #48]	; (8000dc8 <SetSysClock+0xe8>)
 8000d96:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <SetSysClock+0xe8>)
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	f023 0303 	bic.w	r3, r3, #3
 8000d9e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000da0:	4a09      	ldr	r2, [pc, #36]	; (8000dc8 <SetSysClock+0xe8>)
 8000da2:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <SetSysClock+0xe8>)
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	f043 0302 	orr.w	r3, r3, #2
 8000daa:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000dac:	bf00      	nop
 8000dae:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <SetSysClock+0xe8>)
 8000db0:	689b      	ldr	r3, [r3, #8]
 8000db2:	f003 030c 	and.w	r3, r3, #12
 8000db6:	2b08      	cmp	r3, #8
 8000db8:	d1f9      	bne.n	8000dae <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40007000 	.word	0x40007000
 8000dd0:	07405408 	.word	0x07405408
 8000dd4:	40023c00 	.word	0x40023c00

08000dd8 <__libc_init_array>:
 8000dd8:	b570      	push	{r4, r5, r6, lr}
 8000dda:	4e0d      	ldr	r6, [pc, #52]	; (8000e10 <__libc_init_array+0x38>)
 8000ddc:	4c0d      	ldr	r4, [pc, #52]	; (8000e14 <__libc_init_array+0x3c>)
 8000dde:	1ba4      	subs	r4, r4, r6
 8000de0:	10a4      	asrs	r4, r4, #2
 8000de2:	2500      	movs	r5, #0
 8000de4:	42a5      	cmp	r5, r4
 8000de6:	d109      	bne.n	8000dfc <__libc_init_array+0x24>
 8000de8:	4e0b      	ldr	r6, [pc, #44]	; (8000e18 <__libc_init_array+0x40>)
 8000dea:	4c0c      	ldr	r4, [pc, #48]	; (8000e1c <__libc_init_array+0x44>)
 8000dec:	f000 f818 	bl	8000e20 <_init>
 8000df0:	1ba4      	subs	r4, r4, r6
 8000df2:	10a4      	asrs	r4, r4, #2
 8000df4:	2500      	movs	r5, #0
 8000df6:	42a5      	cmp	r5, r4
 8000df8:	d105      	bne.n	8000e06 <__libc_init_array+0x2e>
 8000dfa:	bd70      	pop	{r4, r5, r6, pc}
 8000dfc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e00:	4798      	blx	r3
 8000e02:	3501      	adds	r5, #1
 8000e04:	e7ee      	b.n	8000de4 <__libc_init_array+0xc>
 8000e06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e0a:	4798      	blx	r3
 8000e0c:	3501      	adds	r5, #1
 8000e0e:	e7f2      	b.n	8000df6 <__libc_init_array+0x1e>
 8000e10:	08000e38 	.word	0x08000e38
 8000e14:	08000e38 	.word	0x08000e38
 8000e18:	08000e38 	.word	0x08000e38
 8000e1c:	08000e3c 	.word	0x08000e3c

08000e20 <_init>:
 8000e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e22:	bf00      	nop
 8000e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e26:	bc08      	pop	{r3}
 8000e28:	469e      	mov	lr, r3
 8000e2a:	4770      	bx	lr

08000e2c <_fini>:
 8000e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e2e:	bf00      	nop
 8000e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e32:	bc08      	pop	{r3}
 8000e34:	469e      	mov	lr, r3
 8000e36:	4770      	bx	lr
